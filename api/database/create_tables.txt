create table users (
  user_id int auto_increment primary key,
  first_name varchar(20) not null,
  last_name varchar(20) not null,
  dob date not null,
  account_login varchar(20) not null,
  password varchar(100) not null,
  e_mail varchar(100) not null,
  phone_number int(10),
  unique (account_login,e_mail,phone_number)
)

create table roles (
  role_id int auto_increment primary key,
  role_name varchar(20) not null,
  can_create_role boolean default false,
  can_modify_role boolean default false,
  can_delete_role boolean default false,
  can_order boolean default false,
  can_create_order boolean default false,
  can_modify_order boolean default false,
  can_delete_order boolean default false,
  can_create_user boolean default false,
  can_modify_user boolean default false,
  can_delete_user boolean default false,
  can_create_book boolean default false,
  can_modify_book boolean default false,
  can_delete_book boolean default false,
  can_read_events boolean default false
)

create table user_roles (
  user_role_id int auto_increment primary key,
  user_id int not null,
  role_id int not null,
  user_role_status varchar(20) not null,
  termination_date date null default null,
  foreign key (user_id) references users(user_id),
  foreign key (role_id) references roles(role_id)
)

create table api_endpoints (
  api_id int auto_increment primary key,
  name varchar(50),
  description varchar(255),
  microservice varchar(50),
  endpoint varchar(50) not null
)

create table api_access (
  user_role_api_id int auto_increment primary key,
  user_role_id int not null,
  api_id int not null,
  access boolean default true,
  foreign key (user_role_id) references user_roles(user_role_id),
  foreign key (api_id) references api_endpoints(api_id)
)

create table book_description (
  book_description_id int auto_increment primary key,
  title varchar(255) not null,
  genre varchar(50),
  author varchar(50),
  published_year year,
  age_restriction varchar(20),
  unique (title)
)

create table book (
  book_id int auto_increment primary key,
  book_description_id int not null,
  book_condition varchar(20),
  book_availability varchar(20) not null,
  foreign key (book_description_id) references book_description(book_description_id)
)

create table orders (
  order_id int auto_increment primary key,
  created_by int not null,
  created_on date not null,
  updated_by int null default null,
  updated_on date null default null,
  customer_id int not null,
  order_status varchar(20) not null,
  foreign key (customer_id) references user_roles(user_role_id)
)

create table basket (
  order_id int not null,
  book_id int not null,
  foreign key (order_id) references orders(order_id),
  foreign key (book_id) references book(book_id)
)

create table events (
  event_id int auto_increment primary key,
  event_name varchar(20) not null,
  created_by int not null,
  created_on date not null,
  correlation_id int not null,
  data varchar(2000)
)

create table user_role_status_enum (
  key int auto_increment primary key,
  user_role_status varchar(50) not null
)

create table book_condition_enum (
  key int auto_increment primary key,
  book_condition varchar(50) not null
)

create table book_availability_enum (
  key int auto_increment primary key,
  book_availability varchar(50) not null
)

create table age_restriction_enum (
  key int auto_increment primary key,
  age_restriction varchar(50) not null
)

create table order_status_enum (
  key int auto_increment primary key,
  order_status varchar(50) not null
)

create table event_name_enum (
  key int auto_increment primary key,
  event_name varchar(50) not null
)